message("Config file called")
get_filename_component(ROOT "./" REALPATH)

set(ARCH "x64")
set(ARCH "x64" CACHE STRING "Architecture to build for. (x86/x64)")

if(ARCH STREQUAL "x64")
	set(ARCH "64")
	set(ARCH_OPTION "x86-64")
else()
	if(ARCH STREQUAL "x86")
		set(ARCH "32")
		set(ARCH_OPTION "x86")
	else()
		message(FATAL_ERROR "The given architecture is not supported.")
	endif()
endif()

set(PLATFORM "")
if(UNIX)
	if(APPLE)
		set(PLATFORM "macosx")
	else()
		set(PLATFORM "linux")
	endif()
else()
	if(WIN32)
		set(PLATFORM "windows")
	endif()
endif()

if(PLATFORM STREQUAL "")
	message(FATAL_ERROR "This platform is not supported.")
endif()

set(CMAKE_BUILD_TYPE Release)
set(CMAKE_C_FLAGS "-m${ARCH} -O3 -Wall -D__STRICT_ANSI__")
if(WIN32)
else()
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
endif()
set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -std=gnu++11 -Wno-invalid-offsetof -g -Wno-overloaded-virtual")

# RPathing
set(CMAKE_SKIP_BUILD_RPATH TRUE)
set(CMAKE_SHARED_LINKER_FLAGS "-Wl,-rpath,'$ORIGIN' -Wl,-rpath,'$ORIGIN/lib' -Wl,-rpath-link,. -Wl,--no-undefined")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")
#set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined")
if(UNIX)
	list(APPEND CMAKE_SHARED_LINKER_FLAGS "-Wl,-z,origin -g")
	list(APPEND CMAKE_EXE_LINKER_FLAGS "-Wl,-z,origin -g")
endif()

set(BIN bin${ARCH}/${PLATFORM})
set(LIBRARY_OUTPUT_PATH ${ROOT}/${BIN})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})